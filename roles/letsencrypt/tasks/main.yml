- name: certbot is installed
  apt:
    name: certbot
    state: latest
    update_cache: yes
    cache_valid_time: "{{apt_cache_valid_time | default (3600)}}"

- name: letsencrypt webroot directory exists
  file:
    path: /var/www/letsencrypt
    state: directory

- name: renewal hooks directory exists
  file:
    path: /etc/letsencrypt/renewal-hooks/deploy
    state: directory

- name: hook for nginx reload is present
  template:
    src: nginx.sh.j2
    dest: /etc/letsencrypt/renewal-hooks/deploy/nginx.sh
    mode: 744

- name: unit for failure alerts is present
  template:
    src: letsencrypt-alert@.service.j2
    dest: /etc/systemd/system/letsencrypt-alert@.service
  when: letsencrypt_alert is defined

- name: unit for failure alerts is enabled
  lineinfile:
    path: /lib/systemd/system/certbot.service
    insertafter: \[Unit\]
    line: "OnFailure=letsencrypt-alert@%n.service"
  when: letsencrypt_alert is defined

- name: nginx "catch-all" server block for port 443 is present
  template:
    src: 99-ssl-catchall.conf.j2
    dest: /etc/nginx/sites-available/99-ssl-catchall.conf
  notify:
    - reload nginx

- name: nginx "catch-all" server block for port 443 is enabled
  file:
    path: /etc/nginx/sites-enabled/99-ssl-catchall.conf
    src: ../sites-available/99-ssl-catchall.conf
    state: link
  notify:
    - reload nginx

- name: all certificates are generated
  command: "certbot certonly
    --webroot -w /var/www/letsencrypt 
    --cert-name {{ item }}
    -d {{ item }}
    -m {{ letsencrypt_email }}
    {% if letsencrypt_server %}--server {{ letsencrypt_server }}{% endif %} 
    -n --agree-tos"
  register: certbot
  changed_when: "'no action taken.' not in certbot.stdout"
  with_items: "{{ letsencrypt_domains }}"